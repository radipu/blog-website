@model My_Blog_Website.Areas.Admin.Models.Posts
@using System.Linq

@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["ShowProgressBar"] = true;
}

<!DOCTYPE html>
<html lang="en" class="no-js">
    <body class="single">
        <div id="fh5co-title-box" style="background-image: url(@Model.FeatureImageUrl)" data-stellar-background-ratio="0.5">
            <div class="overlay"></div>
            <div class="page-title">
                <img src="images/person_1.jpg" alt="Author Image">
                <span>@Model.PublishedDate</span>
                @if (Model.LastModifiedDate != null)
                {
                    <span>Last Updated: @Model.LastModifiedDate</span>
                })
                <h2>@Model.Title</h2>
            </div>
        </div>
        <div id="fh5co-single-content" class="container-fluid pb-4 pt-4 paddding">
            <div class="container paddding">
                <div class="row mx-0">
                    <div class="col-md-8 animate-box" data-animate-effect="fadeInLeft">
                        <div class="voice-recitation-section mb-4">
                            <h4>Listen to this post:</h4>
                            <div class="d-flex align-items-center gap-3">
                                <button id="playPauseBtn" class="btn btn-primary"><i class="fas fa-play"></i></button>
                                <button id="stopBtn" class="btn btn-secondary"><i class="fas fa-stop"></i></button>
                                <select id="voiceSelect" class="form-select" style="max-width: 200px;">
                                    <option value="">Default Voice</option>
                                </select>
                                <div class="speed-control">
                                    <label>Speed:</label>
                                    <input type="range" id="rateControl" min="0.5" max="2" step="0.25" value="1">
                                    <span id="rateValue">1x</span>
                                </div>
                            </div>
                        </div>
                        <div id="post-content">
                            @Html.Raw(Model.PostContent)
                        </div>
                        <!--Post Reactions-->
                        <div class="post-reactions mb-4">
                            <h4>React to this post:</h4>
                            <div class="reaction-buttons mt-2">
                                <a href="@Url.Action("PostReact", "Posts", new { postId = Model.PostId, reactionType = "like" })" class="btn btn-sm btn-outline-primary">Like (@Model.PostReactionVotes.Count(r => r.ReactionType == "like"))</a>
                                <a href="@Url.Action("PostReact", "Posts", new { postId = Model.PostId, reactionType = "love" })" class="btn btn-sm btn-outline-danger">Love (@Model.PostReactionVotes.Count(r => r.ReactionType == "love"))</a>
                                <a href="@Url.Action("PostReact", "Posts", new { postId = Model.PostId, reactionType = "care" })" class="btn btn-sm btn-outline-success">Care (@Model.PostReactionVotes.Count(r => r.ReactionType == "care"))</a>
                                <a href="@Url.Action("PostReact", "Posts", new { postId = Model.PostId, reactionType = "angry" })" class="btn btn-sm btn-outline-warning">Angry (@Model.PostReactionVotes.Count(r => r.ReactionType == "angry"))</a>
                                <a href="@Url.Action("PostReact", "Posts", new { postId = Model.PostId, reactionType = "support" })" class="btn btn-sm btn-outline-info">Support (@Model.PostReactionVotes.Count(r => r.ReactionType == "support"))</a>
                            </div>
                        </div>
                        <!--Share the post-->
                        <div class="share-section mt-5">
                            <h4>Share this post on:</h4>
                            @{
                                var postUrl = Url.Action("Single", "Posts", new { category = Model.Categories, slug = Model.Slug }, Context.Request.Scheme);
                                var encodedUrl = Uri.EscapeDataString(postUrl);
                                var encodedTitle = Uri.EscapeDataString(Model.Title);
                            }
                            <div class="d-flex flex-wrap gap-2">
                                <!-- Facebook -->
                                <a href="https://www.facebook.com/sharer/sharer.php?u=@encodedUrl" 
                                   target="_blank" 
                                   class="btn btn-sm btn-primary">
                                    <i class="fa-brands fa-facebook"></i> Facebook
                                </a>

                                <!-- Twitter/X -->
                                <a href="https://twitter.com/intent/tweet?text=@encodedTitle&url=@encodedUrl" 
                                   target="_blank" 
                                   class="btn btn-sm btn-info">
                                    <i class="fa-brands fa-x-twitter"></i> Twitter
                                </a>

                                <!-- LinkedIn -->
                                <a href="https://www.linkedin.com/shareArticle?mini=true&url=@encodedUrl&title=@encodedTitle" 
                                   target="_blank" 
                                   class="btn btn-sm btn-primary" 
                                   style="background-color: #0077b5; border-color: #0077b5;">
                                    <i class="fa-brands fa-linkedin"></i> LinkedIn
                                </a>

                                <!-- WhatsApp -->
                                <a href="https://api.whatsapp.com/send?text=@encodedTitle%20@encodedUrl" 
                                   target="_blank" 
                                   class="btn btn-sm btn-success">
                                    <i class="fa-brands fa-whatsapp"></i> WhatsApp
                                </a>

                                <!-- Email -->
                                <a href="mailto:?subject=@encodedTitle&body=@encodedUrl" 
                                   class="btn btn-sm btn-secondary">
                                    <i class="fa fa-envelope"></i> Email
                                </a>

                                <!-- Copy Link -->
                                <button onclick="copyToClipboard('@postUrl')" 
                                        class="btn btn-sm btn-light">
                                    <i class="fa fa-copy"></i> Copy Link
                                </button>
                            </div>
                        </div>
                        <!-- Comments and Replies -->
                        <div class="comments-section mt-5">
                            <h3>Comments</h3>
                            @if (Model.Comments != null && Model.Comments.Any())
                            {
                                @foreach (var comment in Model.Comments.Where(c => c.ParentCommentId == null))
                                {
                                    <div class="comment mb-3">
                                        <p><strong translate="no">@comment.CommenterName</strong> @(" on ") @comment.CommentDate.ToString("MMM dd, yyyy")</p>
                                        <p>@comment.CommentText</p>
                                        <div class="reactions">
                                            @{
                                                var reactionGroups = comment.ReactionVotes?
                                                    .GroupBy(r => r.ReactionType)
                                                    .Select(g => new { Type = g.Key, Count = g.Count() });
                                            }
                                            @if (reactionGroups != null)
                                            {
                                                foreach (var group in reactionGroups)
                                                {
                                                    <span>@group.Type: @group.Count</span>
                                                }
                                            }
                                        </div>
                                        <div class="reaction-buttons mt-2">
                                            <a href="@Url.Action("React", "Posts", new { commentId = comment.CommentId, reactionType = "like" })" class="btn btn-sm btn-outline-primary">Like</a>
                                            <a href="@Url.Action("React", "Posts", new { commentId = comment.CommentId, reactionType = "love" })" class="btn btn-sm btn-outline-danger">Love</a>
                                            <a href="@Url.Action("React", "Posts", new { commentId = comment.CommentId, reactionType = "care" })" class="btn btn-sm btn-outline-success">Care</a>
                                            <a href="@Url.Action("React", "Posts", new { commentId = comment.CommentId, reactionType = "angry" })" class="btn btn-sm btn-outline-warning">Angry</a>
                                            <a href="@Url.Action("React", "Posts", new { commentId = comment.CommentId, reactionType = "support" })" class="btn btn-sm btn-outline-info">Support</a>
                                        </div>
                                        <button class="btn btn-link" onclick="showReplyForm(@comment.CommentId)">Reply</button>

                                        <!-- Reply Form (Hidden by Default) -->
                                        <div id="reply-form-@comment.CommentId" style="display:none;" class="mt-3">
                                            <form asp-action="AddComment" method="post">
                                                <input type="hidden" name="PostId" value="@Model.PostId" />
                                                <input type="hidden" name="ParentCommentId" value="@comment.CommentId" />
                                                <div class="form-group">
                                                    <label for="CommenterName">Your Name</label>
                                                    <input type="text" name="CommenterName" class="form-control" required />
                                                </div>
                                                <div class="form-group">
                                                    <label for="CommentText">Reply</label>
                                                    <textarea name="CommentText" class="form-control" rows="3" required></textarea>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Submit Reply</button>
                                            </form>
                                        </div>

                                        <!-- Replies -->
                                        @if (comment.Replies != null && comment.Replies.Any())
                                        {
                                            <div class="replies ml-4 mt-3">
                                                @foreach (var reply in comment.Replies)
                                                {
                                                    <div class="comment mb-2">
                                                        <!-- Fixed: Use reply's properties instead of parent comment's -->
                                                        <p><strong translate="no">@reply.CommenterName</strong> @(" on ") @reply.CommentDate.ToString("MMM dd, yyyy")</p>
                                                        <p>@reply.CommentText</p>
                                                        <div class="reactions">
                                                            @{
                                                                var replyReactionGroups = reply.ReactionVotes?
                                                                    .GroupBy(r => r.ReactionType)
                                                                    .Select(g => new { Type = g.Key, Count = g.Count() });
                                                            }
                                                            @if (replyReactionGroups != null)
                                                            {
                                                                foreach (var group in replyReactionGroups)
                                                                {
                                                                    <span>@group.Type: @group.Count </span>
                                                                }
                                                            }
                                                        </div>
                                                        <div class="reaction-buttons mt-2">
                                                            <!-- Keep these links as they are - they now use the new system -->
                                                            <a href="@Url.Action("React", "Posts", new { commentId = reply.CommentId, reactionType = "like" })" class="btn btn-sm btn-outline-primary">Like</a>
                                                            <a href="@Url.Action("React", "Posts", new { commentId = reply.CommentId, reactionType = "love" })" class="btn btn-sm btn-outline-danger">Love</a>
                                                            <a href="@Url.Action("React", "Posts", new { commentId = reply.CommentId, reactionType = "care" })" class="btn btn-sm btn-outline-success">Care</a>
                                                            <a href="@Url.Action("React", "Posts", new { commentId = reply.CommentId, reactionType = "angry" })" class="btn btn-sm btn-outline-warning">Angry</a>
                                                            <a href="@Url.Action("React", "Posts", new { commentId = reply.CommentId, reactionType = "support" })" class="btn btn-sm btn-outline-info">Support</a>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <p>No comments yet. Be the first to comment!</p>
                            }
                        </div>

                        <div class="add-comment mt-5">
                            <h4>Add a Comment</h4>
                            <form asp-action="AddComment" method="post">
                                <input type="hidden" name="PostId" value="@Model.PostId" />
                                <div class="form-group">
                                    <label for="CommenterName">Your Name</label>
                                    <input type="text" name="CommenterName" class="form-control" required />
                                </div>
                                <div class="form-group">
                                    <label for="CommentText">Comment</label>
                                    <textarea name="CommentText" class="form-control" rows="5" required></textarea>
                                </div>
                                <button type="submit" class="btn btn-primary">Submit Comment</button>
                            </form>
                        </div>
                    </div>
                    <!--Tags and mose popular-->
                    <div class="col-md-3 animate-box" data-animate-effect="fadeInRight">
                        <div>
                            <div class="fh5co_heading fh5co_heading_border_bottom py-2 mb-4">Tags</div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="fh5co_tags_all">
                            @foreach (var tag in Model.Tags.Split(','))
                            {
                                <a href="@Url.Action("PostsByTag", "Home", new { tag = tag })" class="fh5co_tagg">@tag</a>
                            }
                        </div>
                        <div>
                            <div class="fh5co_heading fh5co_heading_border_bottom pt-3 py-2 mb-4">Most Popular</div>
                        </div>
                        @if (ViewBag.PopularPosts != null && ViewBag.PopularPosts.Count > 0)
                        {
                            foreach (var popularPost in ViewBag.PopularPosts)
                            {
                                <div class="row pb-3">
                                    <div class="col-5 align-self-center">
                                        <img src="@popularPost.FeatureImageUrl" alt="img" class="fh5co_most_trading"/>
                                    </div>
                                    <div class="col-7 paddding">
                                        <a href="/@popularPost.Categories/@popularPost.Slug" class="d-block most_fh5co_treding_font">
                                            @popularPost.Title
                                        </a>
                                        <div class="most_fh5co_treding_font_123">
                                            @popularPost.PublishedDate?.ToString("MMM dd, yyyy")
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No popular posts found.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!--You may like-->
        <div class="container-fluid pb-4 pt-5">
            <div class="container animate-box">
                <div>
                    <div class="fh5co_heading fh5co_heading_border_bottom py-2 mb-4">You may like</div>
                </div>

                @if (ViewBag.SimilarPosts != null && ViewBag.SimilarPosts.Count > 0)
                {
                    var similarPostCount = ViewBag.SimilarPosts.Count;

                    @if (similarPostCount > 3)
                    {
                        <div class="owl-carousel owl-theme" id="slider2">
                            @foreach (var similarPost in ViewBag.SimilarPosts)
                            {
                                <div class="item px-2">
                                    <div class="fh5co_hover_news_img">
                                        <a href="/@similarPost.Categories/@similarPost.Slug" class="d-block fh5co_small_post_heading">
                                            <div class="fh5co_news_img">
                                                <img src="@similarPost.FeatureImageUrl" alt="@similarPost.Title" />
                                            </div>
                                        </a>
                                        <div>
                                            <a href="/@similarPost.Categories/@similarPost.Slug" class="d-block fh5co_small_post_heading">
                                                <span>@similarPost.Title</span>
                                            </a>
                                            <div class="c_g">
                                                <i class="fa fa-clock-o"></i> 
                                                @similarPost.PublishedDate.ToString("MMM dd, yyyy")
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="row g-4">
                            @foreach (var similarPost in ViewBag.SimilarPosts)
                            {
                                <div class="col-xl-4 col-md-6 col-sm-12">
                                    <div class="fh5co_hover_news_img">
                                        <a href="/@similarPost.Categories/@similarPost.Slug" class="d-block fh5co_small_post_heading">
                                            <div class="fh5co_news_img">
                                                <img src="@similarPost.FeatureImageUrl" alt="@similarPost.Title" />
                                            </div>
                                        </a>
                                        <div>
                                            <a href="/@similarPost.Categories/@similarPost.Slug" class="d-block fh5co_small_post_heading">
                                                <span>@similarPost.Title</span>
                                            </a>
                                            <div class="c_g">
                                                <i class="fa fa-clock-o"></i> 
                                                @similarPost.PublishedDate.ToString("MMM dd, yyyy")
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <p>No related posts found in @ViewBag.CurrentCategory category.</p>
                    </div>
                }
            </div>
        </div>

        <script>
            function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(function() {
                    alert('Link copied to clipboard!');
                }, function(err) {
                    alert('Failed to copy link: ' + err);
                });
            }
        </script>

        <!--Comment Reply-->
        <script>
            function showReplyForm(commentId) {
                var form = document.getElementById('reply-form-' + commentId);
                if (form) {
                    form.style.display = (form.style.display === 'none' || form.style.display === '') ? 'block' : 'none';
                }
            }
        </script>

        <!--text-to-speech-->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                if (!('speechSynthesis' in window)) {
                    alert('Text-to-speech is not supported in your browser');
                    return;
                }

                const synth = window.speechSynthesis;
                let utterance = null;
                let isPlaying = false;
                let isPaused = false;
                let defaultVoice = null;

                // DOM elements
                const playPauseBtn = document.getElementById('playPauseBtn');
                const stopBtn = document.getElementById('stopBtn');
                const voiceSelect = document.getElementById('voiceSelect');
                const rateControl = document.getElementById('rateControl');
                const rateValue = document.getElementById('rateValue');
                const postContentEl = document.getElementById('post-content');
                const postContent = postContentEl.innerText || postContentEl.textContent;

                // Voice setup
                function populateVoices() {
                    const voices = synth.getVoices();
                    voiceSelect.innerHTML = '<option value="">Default Voice</option>';
            
                    // Find Microsoft Zira
                    const ziraVoice = voices.find(voice => 
                        voice.name.toLowerCase().includes('zira') && 
                        voice.lang === 'en-US'
                    );

                    defaultVoice = ziraVoice || null;

                    voices.forEach(voice => {
                        const option = document.createElement('option');
                        option.value = voice.name;
                        option.textContent = `${voice.name} (${voice.lang})`;
                
                        if (ziraVoice && voice.name === ziraVoice.name) {
                            option.selected = true;
                        }
                
                        voiceSelect.appendChild(option);
                    });
                }

                // Initialize voices with retry
                function initVoices() {
                    if (synth.getVoices().length > 0) {
                        populateVoices();
                    } else {
                        synth.onvoiceschanged = populateVoices;
                        setTimeout(populateVoices, 1000);
                    }
                }

                initVoices();

                // Event handlers
                playPauseBtn.addEventListener('click', () => {
                    if (!isPlaying && !isPaused) {
                        startSpeech();
                    } else if (isPaused) {
                        resumeSpeech();
                    } else {
                        pauseSpeech();
                    }
                });

                stopBtn.addEventListener('click', stopSpeech);

                rateControl.addEventListener('input', (e) => {
                    const value = parseFloat(e.target.value);
                    rateValue.textContent = `${value}x`;
                    if (utterance) utterance.rate = value;
                });

                function startSpeech() {
                    if (synth.speaking) synth.cancel();

                    utterance = new SpeechSynthesisUtterance(postContent);
            
                    // Set voice
                    const selectedVoice = voiceSelect.value 
                        ? synth.getVoices().find(v => v.name === voiceSelect.value)
                        : defaultVoice;

                    if (selectedVoice) {
                        utterance.voice = selectedVoice;
                    }

                    utterance.rate = parseFloat(rateControl.value);
                    utterance.pitch = 1;

                    utterance.onend = () => {
                        isPlaying = false;
                        isPaused = false;
                        updateButtonState();
                    };

                    utterance.onpause = () => {
                        isPlaying = false;
                        isPaused = true;
                        updateButtonState();
                    };

                    utterance.onresume = () => {
                        isPlaying = true;
                        isPaused = false;
                        updateButtonState();
                    };

                    synth.speak(utterance);
                    isPlaying = true;
                    isPaused = false;
                    updateButtonState();
                }

                function pauseSpeech() {
                    if (synth.speaking && !synth.paused) {
                        synth.pause();
                        isPlaying = false;
                        isPaused = true;
                        updateButtonState();
                    }
                }

                function resumeSpeech() {
                    if (synth.paused) {
                        synth.resume();
                        isPlaying = true;
                        isPaused = false;
                        updateButtonState();
                    }
                }

                function stopSpeech() {
                    synth.cancel();
                    isPlaying = false;
                    isPaused = false;
                    updateButtonState();
                }

                function updateButtonState() {
                    if (isPlaying) {
                        playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                    } else if (isPaused) {
                        playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                    } else {
                        playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                    }
                }
            });
        </script>
    </body>
</html>